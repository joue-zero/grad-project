classDiagram
    direction 
    
    %% =============== PART 1: EVENT PLANNING TOOLS ===============

    %% -------------- Event Entity (Core Database Table) --------------
    class Event {
        +id : integer
        +user_id : foreignId
        +name : string
        +date : date
        +guest_count : integer
        +status : enum
        +budget : decimal
        +created_at : timestamp
        +updated_at : timestamp
        +createWebsite()
        +calculateBudgetStatus()
    }

    %% -------------- Event Planning Tools (Database Tables) --------------
    class TodoItem {
        +id : integer
        +event_id : foreignId
        +title : string
        +description : text
        +is_completed : boolean
        +due_date : date
        +priority : enum
        +assigned_to : string
        +created_at : timestamp
        +updated_at : timestamp
        +markCompleted()
    }

    class Timeline {
        +id : integer
        +event_id : foreignId
        +milestone_name : string
        +milestone_date : date
        +description : text
        +is_completed : boolean
        +created_at : timestamp
        +updated_at : timestamp
    }

    class Invitation {
        +id : integer
        +event_id : foreignId
        +guest_name : string
        +guest_email : string
        +guest_phone : string
        +invitation_code : string
        +status : enum
        +sent_at : timestamp
        +responded_at : timestamp
        +response : enum
        +plus_one_allowed : boolean
        +dietary_restrictions : text
        +created_at : timestamp
        +updated_at : timestamp
        +send()
        +generateCode()
    }

    %% -------------- Website System (Database Tables) --------------
    class EventWebsite {
        +id : integer
        +event_id : foreignId
        +template_id : foreignId
        +subdomain : string
        +title : string
        +welcome_message : text
        +theme_color : string
        +background_image : string
        +custom_css : text
        +is_published : boolean
        +rsvp_enabled : boolean
        +rsvp_deadline : datetime
        +password_protected : boolean
        +access_password : string
        +view_count : integer
        +created_at : timestamp
        +updated_at : timestamp
        +publish()
        +generateUrl()
    }

    class WebsiteTemplate {
        +id : integer
        +name : string
        +description : text
        +preview_image : string
        +html_template : text
        +css_template : text
        +js_template : text
        +is_premium : boolean
        +category : string
        +created_at : timestamp
        +updated_at : timestamp
    }

    class RsvpResponse {
        +id : integer
        +website_id : foreignId
        +invitation_id : foreignId
        +guest_name : string
        +guest_email : string
        +response_status : enum
        +plus_one_count : integer
        +dietary_restrictions : text
        +special_requests : text
        +submitted_at : timestamp
        +created_at : timestamp
        +updated_at : timestamp
    }

    class WebsiteCustomization {
        +id : integer
        +website_id : foreignId
        +section_name : string
        +content : text
        +is_visible : boolean
        +sort_order : integer
        +created_at : timestamp
        +updated_at : timestamp
    }

    %% -------------- Budget Management (Database Tables) --------------
    class BudgetItem {
        +id : integer
        +event_id : foreignId
        +category : string
        +item_name : string
        +estimated_cost : decimal
        +actual_cost : decimal
        +is_paid : boolean
        +vendor : string
        +notes : text
        +created_at : timestamp
        +updated_at : timestamp
        +calculateVariance()
    }

    class BudgetCategory {
        +id : integer
        +name : string
        +description : text
        +default_percentage : decimal
        +created_at : timestamp
        +updated_at : timestamp
    }

    %% -------------- Essential Business Logic Services --------------
    class BudgetService {
        +createBudgetItem(eventId, data)
        +updateActualCost(budgetItemId, cost)
        +calculateBudgetStatus(eventId)
        +generateBudgetReport(eventId)
    }

    class WebsiteService {
        +createWebsite(eventId, templateId)
        +publishWebsite(websiteId)
        +processRsvp(websiteId, rsvpData)
        +generateInvitationLinks(eventId)
    }

    class InvitationService {
        +sendInvitations(eventId, guestList)
        +trackResponses(eventId)
        +generateInvitationCode(invitationId)
        +processRsvp(invitationCode, response)
    }

    %% -------------- Facade Pattern - Single Entry Point --------------
    class EventPlanningFacade {
        +createEvent(userId, eventData)
        +addTodoItem(eventId, todoData)
        +updateTimeline(eventId, milestoneData)
        +manageBudget(eventId, budgetData)
        +createWebsite(eventId, templateId)
        +sendInvitations(eventId, guestList)
        +trackProgress(eventId)
        +generateReports(eventId)
    }

    %% -------------- MVC Controllers & API Layer --------------
    class EventController {
        +index() : JsonResponse
        +show(id) : JsonResponse
        +store(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +dashboard(eventId) : JsonResponse
    }

    class TodoController {
        +index(eventId) : JsonResponse
        +store(eventId, request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +markCompleted(id) : JsonResponse
    }

    class TimelineController {
        +index(eventId) : JsonResponse
        +store(eventId, request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
    }

    class InvitationController {
        +index(eventId) : JsonResponse
        +store(eventId, request) : JsonResponse
        +send(eventId) : JsonResponse
        +track(eventId) : JsonResponse
        +rsvp(invitationCode, request) : JsonResponse
    }

    class WebsiteController {
        +show(eventId) : JsonResponse
        +store(eventId, request) : JsonResponse
        +update(websiteId, request) : JsonResponse
        +publish(websiteId) : JsonResponse
        +preview(websiteId) : Response
    }

    class RsvpController {
        +show(websiteId) : Response
        +store(websiteId, request) : JsonResponse
        +responses(websiteId) : JsonResponse
    }

    class BudgetController {
        +index(eventId) : JsonResponse
        +store(eventId, request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +report(eventId) : JsonResponse
    }

    class EventPlanningController {
        +dashboard(eventId) : JsonResponse
        +progress(eventId) : JsonResponse
        +summary(eventId) : JsonResponse
    }

    %% =============== RELATIONSHIPS ===============

    %% Core Entity Relationships
    Event "1" --> "*" TodoItem : "has many"
    Event "1" --> "*" Timeline : "has many"
    Event "1" --> "*" Invitation : "has many"
    Event "1" --> "1" EventWebsite : "has one"
    Event "1" --> "*" BudgetItem : "has many"

    %% Website System Relationships
    EventWebsite --> WebsiteTemplate : "uses"
    EventWebsite "1" --> "*" RsvpResponse : "has many"
    EventWebsite "1" --> "*" WebsiteCustomization : "has many"
    Invitation "1" --> "*" RsvpResponse : "has many"

    %% Budget Relationships
    BudgetItem --> BudgetCategory : "belongs to"

    %% Service Dependencies
    EventPlanningFacade ..> BudgetService : "uses"
    EventPlanningFacade ..> WebsiteService : "uses"
    EventPlanningFacade ..> InvitationService : "uses"

    %% Controller Dependencies
    EventController ..> EventPlanningFacade : "uses"
    TodoController ..> EventPlanningFacade : "uses"
    TimelineController ..> EventPlanningFacade : "uses"
    InvitationController ..> InvitationService : "uses"
    WebsiteController ..> WebsiteService : "uses"
    BudgetController ..> BudgetService : "uses"
    EventPlanningController ..> EventPlanningFacade : "uses"

    %% =============== NOTES ===============
    note for Event "Core entity organizing all event-related data"
    note for EventWebsite "CMS functionality with custom domains"
    note for BudgetItem "Financial planning and expense tracking"
    note for EventPlanningFacade "Single entry point for event planning operations" 