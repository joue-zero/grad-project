classDiagram
    direction TB
    
    %% =============== PART 2: CORE BUSINESS LOGIC ===============

    %% -------------- 1. Identity & Access Control (Database Table) --------------
    class User {
        +id : integer
        +name : string
        +email : string
        +password : string
        +phone : string
        +user_type : enum
        +is_active : boolean
        +email_verified_at : timestamp
        +remember_token : string
        +created_at : timestamp
        +updated_at : timestamp
        +hasRole(role) : boolean
        +isVendor() : boolean
        +isCustomer() : boolean
    }

    %% -------------- 2. Event Management (Database Table) --------------
    class Event {
        +id : integer
        +user_id : foreignId
        +name : string
        +date : date
        +guest_count : integer
        +status : enum
        +budget : decimal
        +created_at : timestamp
        +updated_at : timestamp
        +createWebsite()
        +calculateBudgetStatus()
    }

    %% -------------- 3. Service Catalog (Database Tables with Inheritance) --------------
    class Service {
        <<abstract>>
        +id : integer
        +user_id : foreignId
        +name : string
        +description : text
        +base_price : decimal
        +rating : decimal
        +location : string
        +is_active : boolean
        +service_type : string
        +created_at : timestamp
        +updated_at : timestamp
        +calculatePrice(pricingModel)
        +updateRating()
    }

    class Venue {
        +capacity : integer
        +venue_type : string
        +amenities : json
        +address : string
        +city : string
        +state : string
        +country : string
        +calculatePrice(pricingModel)
        +checkAvailability(date, timeSlot)
    }

    class EventService {
        +service_type : string
        +duration : integer
        +is_onsite : boolean
        +equipment_provided : json
        +calculatePrice(pricingModel)
        +checkAvailability(date, timeSlot)
    }

    %% Strategy Pattern for Pricing (Business Logic Classes)
    class PricingModel {
        <<interface>>
        +calculatePrice(service, date, duration)
    }

    class StandardPricing {
        +calculatePrice(service, date, duration)
    }

    class WeekendPricing {
        +calculatePrice(service, date, duration)
    }

    class HolidayPricing {
        +calculatePrice(service, date, duration)
    }

    %% -------------- 4. Reviews & Time Management (Database Tables) --------------
    class Review {
        +id : integer
        +user_id : foreignId
        +service_id : foreignId
        +booking_id : foreignId
        +rating : integer
        +comment : text
        +is_approved : boolean
        +created_at : timestamp
        +updated_at : timestamp
        +approve()
        +reject()
    }

    class TimeSlot {
        +id : integer
        +service_id : foreignId
        +date : date
        +start_time : time
        +end_time : time
        +is_available : boolean
        +created_at : timestamp
        +updated_at : timestamp
        +book()
        +release()
    }

    %% -------------- 5. Cart & Booking System (Database Tables) --------------
    class Cart {
        +id : integer
        +user_id : foreignId
        +total_amount : decimal
        +created_at : timestamp
        +updated_at : timestamp
        +addItem(serviceId, eventId, quantity)
        +removeItem(cartItemId)
        +clear()
        +calculateTotal()
    }

    class CartItem {
        +id : integer
        +cart_id : foreignId
        +service_id : foreignId
        +event_id : foreignId
        +quantity : integer
        +price : decimal
        +created_at : timestamp
        +updated_at : timestamp
    }

    class Booking {
        +id : integer
        +user_id : foreignId
        +event_id : foreignId
        +booking_reference : string
        +total_amount : decimal
        +status : enum
        +booking_date : date
        +created_at : timestamp
        +updated_at : timestamp
        +confirm()
        +cancel()
        +complete()
        +generateReference()
    }

    class BookedItem {
        +id : integer
        +booking_id : foreignId
        +service_id : foreignId
        +quantity : integer
        +final_price : decimal
        +service_date : date
        +start_time : time
        +end_time : time
        +created_at : timestamp
        +updated_at : timestamp
    }

    %% -------------- 6. Payment System (Database Tables + Strategy Pattern) --------------
    class Payment {
        +id : integer
        +booking_id : foreignId
        +amount : decimal
        +payment_method : string
        +status : enum
        +transaction_id : string
        +gateway_response : json
        +processed_at : timestamp
        +created_at : timestamp
        +updated_at : timestamp
        +process()
        +refund()
    }

    class PaymentGateway {
        <<interface>>
        +processPayment(payment)
        +refund(payment)
        +validatePayment(payment)
    }

    class StripeGateway {
        +processPayment(payment)
        +refund(payment)
        +validatePayment(payment)
    }

    class PayPalGateway {
        +processPayment(payment)
        +refund(payment)
        +validatePayment(payment)
    }

    class BankTransferGateway {
        +processPayment(payment)
        +refund(payment)
        +validatePayment(payment)
    }

    %% -------------- 7. Core Business Logic Services --------------
    class BookingService {
        +processCart(cartId)
        +confirmBooking(bookingId)
        +cancelBooking(bookingId)
        +generateBookingReference()
        +notifyObservers(booking, event)
    }

    class PaymentService {
        +processPayment(paymentId)
        +refund(paymentId)
        +validatePayment(paymentId)
        +selectGateway(paymentMethod)
    }

    class NotificationService {
        +sendBookingConfirmation(booking)
        +sendPaymentConfirmation(payment)
        +sendCancellationNotice(booking)
    }

    %% -------------- Observer Pattern for Notifications (Business Logic) --------------
    class BookingObserver {
        <<interface>>
        +onBookingConfirmed(booking)
        +onBookingCancelled(booking)
        +onPaymentCompleted(payment)
    }

    class EmailNotificationObserver {
        +onBookingConfirmed(booking)
        +onBookingCancelled(booking)
        +onPaymentCompleted(payment)
        +sendEmail(recipient, template, data)
    }

    class SmsNotificationObserver {
        +onBookingConfirmed(booking)
        +onBookingCancelled(booking)
        +onPaymentCompleted(payment)
        +sendSms(phoneNumber, message)
    }

    %% -------------- MVC Controllers & API Layer --------------
    class AuthController {
        +login(request) : JsonResponse
        +register(request) : JsonResponse
        +logout() : JsonResponse
        +refresh() : JsonResponse
    }

    class UserController {
        +profile() : JsonResponse
        +updateProfile(request) : JsonResponse
        +dashboard() : JsonResponse
    }

    class VenueController {
        +index() : JsonResponse
        +show(id) : JsonResponse
        +store(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +search(request) : JsonResponse
        +availability(id, request) : JsonResponse
    }

    class ServiceController {
        +index() : JsonResponse
        +show(id) : JsonResponse
        +store(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +search(request) : JsonResponse
        +availability(id, request) : JsonResponse
    }

    class ReviewController {
        +index(serviceId) : JsonResponse
        +store(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +approve(id) : JsonResponse
    }

    class CartController {
        +show() : JsonResponse
        +addItem(request) : JsonResponse
        +removeItem(itemId) : JsonResponse
        +clear() : JsonResponse
        +checkout() : JsonResponse
    }

    class BookingController {
        +index() : JsonResponse
        +show(id) : JsonResponse
        +confirm(id) : JsonResponse
        +cancel(id) : JsonResponse
        +complete(id) : JsonResponse
    }

    class PaymentController {
        +process(request) : JsonResponse
        +status(id) : JsonResponse
        +refund(id) : JsonResponse
        +webhook(request) : JsonResponse
    }

    class AdminController {
        +dashboard() : JsonResponse
        +users() : JsonResponse
        +bookings() : JsonResponse
        +payments() : JsonResponse
        +reports() : JsonResponse
    }

    class VendorController {
        +dashboard() : JsonResponse
        +services() : JsonResponse
        +bookings() : JsonResponse
        +earnings() : JsonResponse
        +reviews() : JsonResponse
    }

    %% =============== RELATIONSHIPS ===============

    %% Core Entity Relationships
    User "1" --> "*" Event : "creates"
    User "1" --> "*" Service : "owns"
    User "1" --> "1" Cart : "has one"
    User "1" --> "*" Booking : "makes"
    User "1" --> "*" Review : "writes"

    %% Service Inheritance
    Service <|-- Venue : "extends"
    Service <|-- EventService : "extends"

    %% Service Relationships
    Service "1" --> "*" TimeSlot : "has many"
    Service "1" --> "*" Review : "receives"

    %% Cart & Booking Relationships
    Cart "1" --> "*" CartItem : "contains"
    CartItem --> Service : "references"
    CartItem --> Event : "for event"

    Booking "1" --> "*" BookedItem : "contains"
    BookedItem --> Service : "books"
    Booking "1" --> "1" Payment : "has payment"

    %% Review Relationships
    Review --> User : "written by"
    Review --> Service : "about"
    Review --> Booking : "for booking"

    %% Strategy Pattern Relationships
    Service ..> PricingModel : "uses"
    PricingModel <|.. StandardPricing : "implements"
    PricingModel <|.. WeekendPricing : "implements"
    PricingModel <|.. HolidayPricing : "implements"

    %% Payment Strategy Relationships
    Payment ..> PaymentGateway : "uses"
    PaymentGateway <|.. StripeGateway : "implements"
    PaymentGateway <|.. PayPalGateway : "implements"
    PaymentGateway <|.. BankTransferGateway : "implements"

   

    %% Observer Pattern Relationships
    BookingService ..> BookingObserver : "notifies"
    BookingObserver <|.. EmailNotificationObserver : "implements"
    BookingObserver <|.. SmsNotificationObserver : "implements"

    %% Service Dependencies
    BookingService ..> BookingObserver : "uses"
    PaymentService ..> PaymentGateway : "uses"
    NotificationService ..> BookingObserver : "uses"

    %% Controller Dependencies
    AuthController ..> User : "manages"
    UserController ..> User : "manages"
    VenueController ..> Venue : "manages"
    ServiceController ..> EventService : "manages"
    ReviewController ..> Review : "manages"
    CartController ..> Cart : "manages"
    BookingController ..> BookingService : "uses"
    PaymentController ..> PaymentService : "uses"
    AdminController ..> User : "manages"
    VendorController ..> Service : "manages"

    %% =============== NOTES ===============
    note for User "Core user entity with role-based access"
    note for Service "Abstract base class for all bookable services"
    note for Booking "Unified booking system for all services"
    note for Payment "Payment processing with multiple gateways"
    note for BookingService "Core business logic for booking operations" 