classDiagram
    direction TB
    
    %% =============== EVENT PLANNING CONTROLLERS (API LAYER) ===============

    %% -------------- Service Layer References (External) --------------
    class EventManagementService {
        +createEvent(eventData)
        +updateEvent(eventId, data)
        +getEvent(eventId)
        +getUserEvents(userId)
    }

    class TodoManagementService {
        +createTodoItem(eventId, todoData)
        +getTodoItem(todoId)
        +getEventTodos(eventId)
        +markTodoCompleted(todoId)
    }

    class TimelineManagementService {
        +createMilestone(eventId, milestoneData)
        +getMilestone(milestoneId)
        +getEventTimeline(eventId)
        +markMilestoneCompleted(milestoneId)
    }

    class InvitationManagementService {
        +createInvitation(eventId, invitationData)
        +getInvitation(invitationId)
        +getEventInvitations(eventId)
        +sendInvitation(invitationId)
    }

    class WebsiteManagementService {
        +createEventWebsite(eventId, websiteData)
        +getEventWebsite(websiteId)
        +publishWebsite(websiteId)
        +customizeWebsite(websiteId, customizations)
    }

    class BudgetManagementService {
        +createBudgetItem(eventId, budgetData)
        +getBudgetItem(budgetItemId)
        +getEventBudget(eventId)
        +calculateBudgetTotal(eventId)
    }

    class EventPlanningFacade {
        +createCompleteEvent(eventData)
        +getEventDashboard(eventId)
        +getEventProgress(eventId)
        +finalizeEvent(eventId)
    }

    %% -------------- MVC Controllers --------------
    class EventController {
        +index() : JsonResponse
        +show(id) : JsonResponse
        +store(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +dashboard(id) : JsonResponse
        +duplicate(id) : JsonResponse
        +archive(id) : JsonResponse
    }

    class TodoController {
        +index(eventId) : JsonResponse
        +show(id) : JsonResponse
        +store(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +markCompleted(id) : JsonResponse
        +markIncomplete(id) : JsonResponse
        +overdue(eventId) : JsonResponse
    }

    class TimelineController {
        +index(eventId) : JsonResponse
        +show(id) : JsonResponse
        +store(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +markCompleted(id) : JsonResponse
        +upcoming(eventId) : JsonResponse
        +report(eventId) : JsonResponse
    }

    class InvitationController {
        +index(eventId) : JsonResponse
        +show(id) : JsonResponse
        +store(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +send(id) : JsonResponse
        +resend(id) : JsonResponse
        +bulkCreate(request) : JsonResponse
        +statistics(eventId) : JsonResponse
    }

    class WebsiteController {
        +show(eventId) : JsonResponse
        +create(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +publish(id) : JsonResponse
        +unpublish(id) : JsonResponse
        +customize(id, request) : JsonResponse
        +analytics(id) : JsonResponse
    }

    class BudgetController {
        +index(eventId) : JsonResponse
        +show(id) : JsonResponse
        +store(request) : JsonResponse
        +update(id, request) : JsonResponse
        +destroy(id) : JsonResponse
        +markPaid(id) : JsonResponse
        +report(eventId) : JsonResponse
        +variance(eventId) : JsonResponse
    }

    class EventPlanningController {
        +dashboard(eventId) : JsonResponse
        +progress(eventId) : JsonResponse
        +overview(eventId) : JsonResponse
        +finalize(eventId) : JsonResponse
        +clone(eventId) : JsonResponse
        +report(eventId) : JsonResponse
    }

    %% =============== RELATIONSHIPS (Controller â†’ Service ONLY) ===============

    %% Controller Dependencies
    EventController ..> EventManagementService : "uses"
    TodoController ..> TodoManagementService : "uses"
    TimelineController ..> TimelineManagementService : "uses"
    InvitationController ..> InvitationManagementService : "uses"
    WebsiteController ..> WebsiteManagementService : "uses"
    BudgetController ..> BudgetManagementService : "uses"
    EventPlanningController ..> EventPlanningFacade : "uses"

    %% =============== NOTES ===============
    note for EventController "Handles event CRUD operations and lifecycle"
    note for TodoController "Manages event todo items and task tracking"
    note for TimelineController "Manages event milestones and timeline"
    note for InvitationController "Handles guest invitations and RSVP"
    note for WebsiteController "Manages event website creation and customization"
    note for BudgetController "Handles budget planning and expense tracking"
    note for EventPlanningController "Coordinates complex event planning workflows" 