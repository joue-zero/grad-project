classDiagram
    direction TB
    
    %% =============== PART 2D: PAYMENT SYSTEM MODULE ===============

    %% -------------- Core Reference (External) --------------
    class Booking_model {
        +id : integer
        +user_id : foreignId
        +booking_reference : string
        +total_amount : decimal
        +status : enum
    }

    %% -------------- Payment Model (Database Entity) --------------
    class Payment_model {
        +id : integer
        +booking_id : foreignId
        +amount : decimal
        +payment_method : string
        +status : enum
        +transaction_id : string
        +gateway_response : json
        +processed_at : timestamp
        +created_at : timestamp
        +updated_at : timestamp
        +process()
        +refund()
    }

    %% -------------- Strategy Pattern for Payment Gateways --------------
    class PaymentGateway {
        <<interface>>
        +processPayment(payment)
        +refund(payment)
        +validatePayment(payment)
        +getTransactionStatus(transactionId)
    }


    class PayMobGateway {
        +processPayment(payment)
        +refund(payment)
        +validatePayment(payment)
        +getTransactionStatus(transactionId)
        +createOrder(amount)
        +captureOrder(orderId)
    }

    %% -------------- Service Layer Classes --------------
    class PaymentService {
        +createPayment(bookingId, amount, paymentMethod)
        +processPayment(paymentId)
        +refundPayment(paymentId, amount)
        +validatePayment(paymentId)
        +getPayment(paymentId)
        +getPaymentsByBooking(bookingId)
        +getPaymentsByUser(userId)
        +selectGateway(paymentMethod)
        +handleWebhook(gateway, payload)
        +updatePaymentStatus(paymentId, status)
    }

    %% =============== RELATIONSHIPS ===============

    %% Model Relationships
    Booking_model "1" --> "1" Payment_model : "has payment"

    %% Strategy Pattern Relationships
    Payment_model ..> PaymentGateway : "uses"
    PaymentGateway <|.. PayMobGateway : "implements"

    %% Service Layer Dependencies
    PaymentService ..> Payment_model : "manages"
    PaymentService ..> PaymentGateway : "uses"


    %% =============== NOTES ===============
    note for Payment_model "Payment processing with multiple gateways"
    note for PaymentGateway "Strategy pattern for different payment providers"
    note for PaymentService "Business logic for payment operations"
    